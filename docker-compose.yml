version: '3'

networks:
  monitor-net:
    external: 
        name: app-net

services:
  
  prometheus:
    image: prom/prometheus:v2.25.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - ${PROM_DATA}:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      #- '--web.enable-admin-api' #config if need using api
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

# monitor the host system
  nodeexporter:
    image: prom/node-exporter:v1.1.2
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
# collects, aggregates, processes, and exports information about running containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.39.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
# monitor dashboards UI      
  grafana:
    image: grafana/grafana:7.5.1
    container_name: grafana
    expose:
      - 3000
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ${GRAFANA_DATA}:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    links:
      - prometheus:prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitor-net
    depends_on:
      - prometheus
    labels:
      org.label-schema.group: "monitoring"
# reverse proxy (note: using caddy v2 )
  caddy:
    image: caddy:2.3.0 #caddy
    container_name: caddy
    ports:
      - "${GRAFANA_PORT}:3000"
      - "${PROM_PORT}:9090"
      #- "9093:9093"
      #- "9091:9091"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
  # Optional install
# exists to allow ephemeral and batch jobs to expose their metrics to Prometheus
# pushgateway:
#   image: prom/pushgateway:v1.4.0
#   container_name: pushgateway
#   restart: unless-stopped
#   expose:
#     - 9091
#   networks:
#     - monitor-net
#   labels:
#     org.label-schema.group: "monitoring"
#
# alertmanager:
#   image: prom/alertmanager:v0.21.0
#   container_name: alertmanager
#   volumes:
#     - ./alertmanager:/etc/alertmanager
#   command:
#     - '--config.file=/etc/alertmanager/config.yml'
#     - '--storage.path=/alertmanager'
#   restart: unless-stopped
#   expose:
#     - 9093
#   networks:
#     - monitor-net
#   labels:
#     org.label-schema.group: "monitoring"
  